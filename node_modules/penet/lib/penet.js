var http = require("http"),
    logger = require("./util").logger,
    fs   = require("fs"),
    util = require("./util"),
    url  = require("url"),
    core = require("./core"),
    Boot = require("./boot").Boot,
    BootCollection = require("./boot").BootCollection,
    Handle = require('./handle').Handle,
    HandleCollection = require("./handle").HandleCollection,
    doMessage = core.doMessage;


/**
 * Node - PENET
 *
 * VERSION 0.0.1
 *
 * Pent:
 *  field:
 *      encoding - global encoding
 *      boots - where to start webapp by url
 *      handles - handle data from request
 *
 *  function:
 *      addBoot - add a boot to boots
 *      addHandle - add a handle to handles
 *      static - set some static resource
 *      start - start server
 *
 * @param options
 * @constructor
 */

var Penet  = function(options){

    this.VERSION = "0.0.1";
    this.encoding = "UTF-8";
    this.boots = new BootCollection();
    this.handles = new HandleCollection();
    this.static_dir;

    this.addBoot = function(url,boot){
        this.boots[url] = boot
        logger.info("Penet add boot: " + url);
    }

    this.addHandle = function(handleName, handle){
        this.handles[handleName] = handle;
        logger.info("Penet add handle: " + handleName);
    };

    this.static = function(options){
        var options = options || {};
        this.static_dir = options.static_dir;
        logger.info("Penet static dir: " + this.static_dir);
    };

};

/**
 * Do Message
 * @param port
 */
Penet.prototype.start =  function(port){
    var me = this;


    var requestListener = function(incomingMessage, response){
        doMessage(incomingMessage,function(){
            fs.readFile(me.static_dir + url.parse(incomingMessage.url).pathname, {
                encoding: me.encoding
            },function(err, data){
                /**
                 * content from file read by request url.pathname and will as template render to user
                 * @type {string}
                 */
                var template = data?new Buffer(data).toString():undefined;


                /**
                 * case 2:
                 *      boot:
                 *      handle.method:
                 */
                if(me.boots.hasOwnProperty(url.parse(incomingMessage.url).pathname)){

                }

                /**
                 * case 2:
                 *      handle:
                 *      handle.method:
                 */
                var params = incomingMessage.params;
                if(me.handles.hasOwnProperty(params.handle)
                    && me.handles[params.handle].hasOwnProperty(params.method)){

                    var handle = new Handle(me.handles[params.handle]);

                    handle.penet = me;
                    handle.incomingMessage = incomingMessage;
                    handle.response = response;
                    handle.params = params;
                    handle.template = template;
                    handle.static_dir = me.static_dir;

                    return handle[params.method]();
                }

                /**
               * case 2:
                 */
                if(template){
                    console.log(JSON.stringify(incomingMessage.params));
                    response.writeHead(200,{ 'Content-Type': "text/html"});
                    response.write(template,me.encoding);
                    return response.end();
                }

                /**
                 * case latest:
                 *
                 */
                response.writeHead(404,{ 'Content-Type': "application/json"});
                response.write(JSON.stringify({code:404}),me.encoding);
                response.end();
            });
        });
    };
    var server = http.createServer(requestListener);
    server.listen(port || 3000);
};

module.exports = Penet;

